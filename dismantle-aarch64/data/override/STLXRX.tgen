------------- Classes -----------------
------------- Defs -----------------
def STLXRX {	// Instruction AArch64Inst EncodedI I BaseLoadStoreExclusive Sched StoreExclusive
  field bits<32> Inst = { 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, Ws{4}, Ws{3}, Ws{2}, Ws{1}, Ws{0}, 1, 1, 1, 1, 1, 1, Rn{4}, Rn{3}, Rn{2}, Rn{1}, Rn{0}, Rt{4}, Rt{3}, Rt{2}, Rt{1}, Rt{0} };
  field bits<32> Unpredictable = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "AArch64";
  dag OutOperandList = (outs GPR32:$Ws);
  dag InOperandList = (ins GPR64:$Rt, GPR64sp0:$Rn);
  string AsmString = "stlxr	$Ws, $Rt, [$Rn]";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = 1;
  bit mayStore = 1;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isConvergent = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isRegSequence = 0;
  bit isPseudo = 0;
  bit isExtractSubreg = 0;
  bit isInsertSubreg = 0;
  bit hasSideEffects = 1;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  bit hasNoSchedulingInfo = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = [WriteSTX];
  string Constraints = "@earlyclobber $Ws";
  string DisableEncoding = "";
  string PostEncoderMethod = "fixLoadStoreExclusive<1,0>";
  string DecoderMethod = "DecodeExclusiveLdStInstruction";
  bit hasCompleteDecoder = 1;
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  Format F = NormalFrm;
  bits<2> Form = { 0, 1 };
  bits<5> Ws = { ?, ?, ?, ?, ? };
  bits<5> Rt = { ?, ?, ?, ?, ? };
  bits<5> Rn = { ?, ?, ?, ?, ? };
  string NAME = ?;
}

------------- Classes -----------------
------------- Defs -----------------
def ORRWrs {	// Instruction AArch64Inst EncodedI I Sched BaseLogicalSReg Wrs
  field bits<32> Inst = { 0, 0, 1, 0, 1, 0, 1, 0, shift{7}, shift{6}, 0, src2{4}, src2{3}, src2{2}, src2{1}, src2{0}, shift{5}, shift{4}, shift{3}, shift{2}, shift{1}, shift{0}, src1{4}, src1{3}, src1{2}, src1{1}, src1{0}, dst{4}, dst{3}, dst{2}, dst{1}, dst{0} };
  field bits<32> Unpredictable = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "AArch64";
  dag OutOperandList = (outs GPR32:$dst);
  dag InOperandList = (ins GPR32:$src1, logical_shifted_reg32:$src2, addshift64:$shift);
  string AsmString = "orr	$dst, $src1, $src2$shift";
  list<dag> Pattern = [(set GPR32:$dst, (or GPR32:$src1, logical_shifted_reg32:$src2))];
  list<Register> Uses = [];
  list<Register> Defs = [];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isConvergent = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isRegSequence = 0;
  bit isPseudo = 0;
  bit isExtractSubreg = 0;
  bit isInsertSubreg = 0;
  bit hasSideEffects = ?;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  bit hasNoSchedulingInfo = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = [WriteISReg, ReadI, ReadISReg];
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "DecodeThreeAddrSRegInstruction";
  bit hasCompleteDecoder = 1;
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  Format F = NormalFrm;
  bits<2> Form = { 0, 1 };
  bits<5> dst = { ?, ?, ?, ?, ? };
  bits<5> src1 = { ?, ?, ?, ?, ? };
  bits<5> src2 = { ?, ?, ?, ?, ? };
  bits<8> shift = { ?, ?, ?, ?, ?, ?, ?, ? };
  string NAME = "ORR";
}

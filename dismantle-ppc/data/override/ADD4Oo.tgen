------------- Classes -----------------
------------- Defs -----------------
def ADD4Oo {	// Instruction I XOForm_1 isDOT RecFormRel o
  field bits<32> Inst = { 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, RB{0}, RB{1}, RB{2}, RB{3}, RB{4}, RA{0}, RA{1}, RA{2}, RA{3}, RA{4}, RT{0}, RT{1}, RT{2}, RT{3}, RT{4}, 1, 1, 1, 1, 1, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "PPC";
  dag OutOperandList = (outs gprc:$rT);
  dag InOperandList = (ins gprc:$rA, gprc:$rB);
  string AsmString = "addo. $rT, $rA, $rB";
  list<dag> Pattern = [];
  list<Register> Uses = [SO];
  list<Register> Defs = [SO,OV,CR0];
  list<Predicate> Predicates = [];
  int Size = 4;
  string DecoderNamespace = "";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 1;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isConvergent = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isRegSequence = 0;
  bit isPseudo = 0;
  bit isExtractSubreg = 0;
  bit isInsertSubreg = 0;
  bit hasSideEffects = 0;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  bit hasNoSchedulingInfo = 0;
  InstrItinClass Itinerary = IIC_IntSimple;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bit hasCompleteDecoder = 1;
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  bit PPC64 = 0;
  bits<1> PPC970_First = { 0 };
  bits<1> PPC970_Single = { 0 };
  bits<1> PPC970_Cracked = { 0 };
  bits<3> PPC970_Unit = { 0, 0, 1 };
  string BaseName = "add";
  bit Interpretation64Bit = 0;
  bits<5> RT = { ?, ?, ?, ?, ? };
  bits<5> RA = { ?, ?, ?, ?, ? };
  bits<5> RB = { ?, ?, ?, ?, ? };
  bit RC = 1;
  string NAME = "ADD4";
}

------------- Classes -----------------
------------- Defs -----------------
def t2MSR_M {	// Instruction InstTemplate Encoding InstARM Thumb2I T2I Requires
  field bits<32> Inst = { 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, Rn{3}, Rn{2}, Rn{1}, Rn{0}, 1, 0, 0, 0, SYSm{11}, SYSm{10}, 0, 0, SYSm{7}, SYSm{6}, SYSm{5}, SYSm{4}, SYSm{3}, SYSm{2}, SYSm{1}, SYSm{0} };
  field bits<32> Unpredictable = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };
  string Namespace = "ARM";
  dag OutOperandList = (outs);
  dag InOperandList = (ins msr_mask_10:$SYSm, rGPR:$Rn, pred:$p);
  string AsmString = "msr${p}	$SYSm, $Rn";
  list<dag> Pattern = [];
  list<Register> Uses = [];
  list<Register> Defs = [CPSR];
  list<Predicate> Predicates = [IsThumb, IsMClass];
  int Size = 4;
  string DecoderNamespace = "Thumb2";
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isConvergent = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isRegSequence = 0;
  bit isPseudo = 0;
  bit isExtractSubreg = 0;
  bit isInsertSubreg = 0;
  bit hasSideEffects = ?;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  bit hasNoSchedulingInfo = 0;
  InstrItinClass Itinerary = NoItinerary;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  string DecoderMethod = "";
  bit hasCompleteDecoder = 1;
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  bit UseNamedOperandTable = 0;
  AddrMode AM = AddrModeNone;
  IndexMode IM = IndexModeNone;
  bits<2> IndexModeBits = { 0, 0 };
  Format F = ThumbFrm;
  bits<6> Form = { 0, 1, 1, 0, 0, 1 };
  Domain D = GenericDomain;
  bit isUnaryDataProc = 0;
  bit canXformTo16Bit = 0;
  bit thumbArithFlagSetting = 0;
  bits<12> SYSm = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  bits<4> Rn = { ?, ?, ?, ? };
  string NAME = ?;
}

